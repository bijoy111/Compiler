<ID, include>
<RELOP, <>
<ID, bits>
<MULOP, />
<ID, stdc>
<INCOP, ++>
<ID, h>
<RELOP, >>
<ID, using>
<ID, namespace>
<ID, std>
<SEMICOLON, ;>
<ID, typedef>
<ID, long>
<ID, long>
<INT, int>
<ID, ll>
<SEMICOLON, ;>
<ID, typedef>
<DOUBLE, double>
<DOUBLE, double>
<SEMICOLON, ;>
<ID, define>
<ID, test>
<ID, ll>
<ID, t>
<SEMICOLON, ;>
<ID, cin>
<BITOP, >>>
<ID, t>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<ID, ll>
<ID, tc>
<ASSIGNOP, =>
<CONST_INT, 1>
<SEMICOLON, ;>
<ID, tc>
<RELOP, <=>
<ID, t>
<SEMICOLON, ;>
<ID, tc>
<INCOP, ++>
<RPAREN, )>
<ID, define>
<ID, caase>
<ID, cout>
<BITOP, <<>
<SINGLE LINE STRING, Case >
<BITOP, <<>
<ID, tc>
<BITOP, <<>
<SINGLE LINE STRING, : >
<SEMICOLON, ;>
<ID, define>
<ID, arrays>
<ID, ll>
<ID, n>
<SEMICOLON, ;>
<ID, cin>
<BITOP, >>>
<ID, n>
<SEMICOLON, ;>
<ID, ll>
<ID, a>
<LSQUARE, [>
<ID, n>
<RSQUARE, ]>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<ID, ll>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<ID, n>
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<RPAREN, )>
<ID, cin>
<BITOP, >>>
<ID, a>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<SEMICOLON, ;>
<ID, define>
<ID, shown>
<FOR, for>
<LPAREN, (>
<ID, ll>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<ID, n>
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<RPAREN, )>
<ID, cout>
<BITOP, <<>
<ID, a>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<BITOP, <<>
<SINGLE LINE STRING,  >
<SEMICOLON, ;>
<ID, cout>
<BITOP, <<>
<ID, endl>
<SEMICOLON, ;>
<ID, define>
<ID, pll>
<ID, pair>
<RELOP, <>
<ID, ll>
<COMMA, ,>
<ID, ll>
<RELOP, >>
<ID, define>
<ID, pld>
<ID, pair>
<RELOP, <>
<ID, ll>
<COMMA, ,>
<DOUBLE, double>
<RELOP, >>
<ID, define>
<ID, pdl>
<ID, pair>
<RELOP, <>
<DOUBLE, double>
<COMMA, ,>
<ID, ll>
<RELOP, >>
<ID, define>
<ID, mp>
<ID, make_pair>
<ID, define>
<ID, x>
<ID, first>
<ID, define>
<ID, y>
<ID, second>
<ID, define>
<ID, double_MAX>
<CONST_FLOAT, 1000000000.00>
<ID, define>
<ID, N>
<CONST_INT, 200009>
<ID, define>
<ID, pi>
<ID, acos>
<LPAREN, (>
<CONST_FLOAT, -1.0>
<RPAREN, )>
<ID, class>
<ID, point>
<LCURL, {>
<ID, public>
<DOUBLE, double>
<ID, x>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, y>
<SEMICOLON, ;>
<ID, point>
<LPAREN, (>
<DOUBLE, double>
<ID, x>
<COMMA, ,>
<DOUBLE, double>
<ID, y>
<RPAREN, )>
<LCURL, {>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, x>
<ASSIGNOP, =>
<ID, x>
<SEMICOLON, ;>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, y>
<ASSIGNOP, =>
<ID, y>
<SEMICOLON, ;>
<RCURL, }>
<ID, point>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, x>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, y>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<RCURL, }>
<DOUBLE, double>
<ID, dist>
<LPAREN, (>
<ID, point>
<ID, a>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, x>
<ADDOP, ->
<ID, a>
<ID, x>
<RPAREN, )>
<MULOP, *>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, x>
<ADDOP, ->
<ID, a>
<ID, x>
<RPAREN, )>
<ADDOP, +>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, y>
<ADDOP, ->
<ID, a>
<ID, y>
<RPAREN, )>
<MULOP, *>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, y>
<ADDOP, ->
<ID, a>
<ID, y>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<DOUBLE, double>
<ID, dist>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, x>
<RPAREN, )>
<MULOP, *>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, x>
<RPAREN, )>
<ADDOP, +>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, y>
<RPAREN, )>
<MULOP, *>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, y>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<DOUBLE, double>
<ID, angle>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<DOUBLE, double>
<ID, d>
<ASSIGNOP, =>
<ID, sqrt>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, dist>
<LPAREN, (>
<RPAREN, )>
<RPAREN, )>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, t>
<ASSIGNOP, =>
<ID, asin>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, y>
<MULOP, />
<ID, d>
<RPAREN, )>
<SEMICOLON, ;>
<ID, t>
<ASSIGNOP, =>
<ID, abs>
<LPAREN, (>
<ID, t>
<RPAREN, )>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, x>
<RELOP, >=>
<CONST_INT, 0>
<LOGICOP, &&>
<ID, y>
<RELOP, >=>
<CONST_INT, 0>
<RPAREN, )>
<RETURN, return>
<ID, t>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, x>
<RELOP, <>
<CONST_INT, 0>
<LOGICOP, &&>
<ID, y>
<RELOP, >=>
<CONST_INT, 0>
<RPAREN, )>
<RETURN, return>
<ID, pi>
<ADDOP, ->
<ID, t>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, x>
<RELOP, >=>
<CONST_INT, 0>
<LOGICOP, &&>
<ID, y>
<RELOP, <>
<CONST_INT, 0>
<RPAREN, )>
<RETURN, return>
<ID, pi>
<ADDOP, +>
<ID, pi>
<ADDOP, ->
<ID, t>
<SEMICOLON, ;>
<RETURN, return>
<ID, pi>
<ADDOP, +>
<ID, t>
<SEMICOLON, ;>
<RCURL, }>
<DOUBLE, double>
<ID, angle>
<LPAREN, (>
<ID, point>
<ID, p>
<RPAREN, )>
<LCURL, {>
<ID, point>
<ID, h>
<LPAREN, (>
<ID, p>
<ID, x>
<ADDOP, ->
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, x>
<COMMA, ,>
<ID, p>
<ID, y>
<ADDOP, ->
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, y>
<RPAREN, )>
<SEMICOLON, ;>
<RETURN, return>
<ID, h>
<ID, angle>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ID, friend>
<ID, ostream>
<BITOP, &>
<ID, operator>
<BITOP, <<>
<LPAREN, (>
<ID, ostream>
<BITOP, &>
<ID, os>
<COMMA, ,>
<ID, const>
<ID, point>
<BITOP, &>
<ID, dt>
<RPAREN, )>
<SEMICOLON, ;>
<ID, point>
<ID, operator>
<ADDOP, +>
<LPAREN, (>
<ID, const>
<ID, point>
<BITOP, &>
<ID, b>
<RPAREN, )>
<ID, const>
<LCURL, {>
<RETURN, return>
<ID, point>
<LCURL, {>
<ID, x>
<ADDOP, +>
<ID, b>
<ID, x>
<COMMA, ,>
<ID, y>
<ADDOP, +>
<ID, b>
<ID, y>
<RCURL, }>
<SEMICOLON, ;>
<RCURL, }>
<ID, point>
<ID, operator>
<ADDOP, ->
<LPAREN, (>
<ID, const>
<ID, point>
<BITOP, &>
<ID, b>
<RPAREN, )>
<ID, const>
<LCURL, {>
<RETURN, return>
<ID, point>
<LCURL, {>
<ID, x>
<ADDOP, ->
<ID, b>
<ID, x>
<COMMA, ,>
<ID, y>
<ADDOP, ->
<ID, b>
<ID, y>
<RCURL, }>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, operator>
<MULOP, *>
<LPAREN, (>
<ID, const>
<ID, point>
<BITOP, &>
<ID, b>
<RPAREN, )>
<ID, const>
<LCURL, {>
<RETURN, return>
<LPAREN, (>
<INT, int>
<RPAREN, )>
<ID, x>
<MULOP, *>
<ID, b>
<ID, y>
<ADDOP, ->
<LPAREN, (>
<INT, int>
<RPAREN, )>
<ID, y>
<MULOP, *>
<ID, b>
<ID, x>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, operator>
<ADDOP, +>
<ASSIGNOP, =>
<LPAREN, (>
<ID, const>
<ID, point>
<BITOP, &>
<ID, b>
<RPAREN, )>
<LCURL, {>
<ID, x>
<ADDOP, +>
<ASSIGNOP, =>
<ID, b>
<ID, x>
<SEMICOLON, ;>
<ID, y>
<ADDOP, +>
<ASSIGNOP, =>
<ID, b>
<ID, y>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, operator>
<ADDOP, ->
<ASSIGNOP, =>
<LPAREN, (>
<ID, const>
<ID, point>
<BITOP, &>
<ID, b>
<RPAREN, )>
<LCURL, {>
<ID, x>
<ADDOP, ->
<ASSIGNOP, =>
<ID, b>
<ID, x>
<SEMICOLON, ;>
<ID, y>
<ADDOP, ->
<ASSIGNOP, =>
<ID, b>
<ID, y>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, operator>
<MULOP, *>
<ASSIGNOP, =>
<LPAREN, (>
<ID, const>
<INT, int>
<ID, k>
<RPAREN, )>
<LCURL, {>
<ID, x>
<MULOP, *>
<ASSIGNOP, =>
<ID, k>
<SEMICOLON, ;>
<ID, y>
<MULOP, *>
<ASSIGNOP, =>
<ID, k>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, cross>
<LPAREN, (>
<ID, const>
<ID, point>
<BITOP, &>
<ID, b>
<COMMA, ,>
<ID, const>
<ID, point>
<BITOP, &>
<ID, c>
<RPAREN, )>
<ID, const>
<LCURL, {>
<RETURN, return>
<LPAREN, (>
<ID, b>
<ADDOP, ->
<MULOP, *>
<ID, this>
<RPAREN, )>
<MULOP, *>
<LPAREN, (>
<ID, c>
<ADDOP, ->
<MULOP, *>
<ID, this>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
<SEMICOLON, ;>
<ID, class>
<ID, line>
<LCURL, {>
<ID, public>
<DOUBLE, double>
<ID, a>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, b>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, c>
<SEMICOLON, ;>
<ID, line>
<LPAREN, (>
<DOUBLE, double>
<ID, a>
<COMMA, ,>
<DOUBLE, double>
<ID, b>
<COMMA, ,>
<DOUBLE, double>
<ID, c>
<RPAREN, )>
<LCURL, {>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<ASSIGNOP, =>
<ID, a>
<SEMICOLON, ;>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<ASSIGNOP, =>
<ID, b>
<SEMICOLON, ;>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, c>
<ASSIGNOP, =>
<ID, c>
<SEMICOLON, ;>
<RCURL, }>
<ID, line>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, c>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<RCURL, }>
<ID, line>
<LPAREN, (>
<ID, point>
<ID, P>
<COMMA, ,>
<ID, point>
<ID, Q>
<RPAREN, )>
<LCURL, {>
<ID, a>
<ASSIGNOP, =>
<ID, Q>
<ID, y>
<ADDOP, ->
<ID, P>
<ID, y>
<SEMICOLON, ;>
<ID, b>
<ASSIGNOP, =>
<ID, P>
<ID, x>
<ADDOP, ->
<ID, Q>
<ID, x>
<SEMICOLON, ;>
<ID, c>
<ASSIGNOP, =>
<ADDOP, ->
<LPAREN, (>
<ID, a>
<MULOP, *>
<LPAREN, (>
<ID, P>
<ID, x>
<RPAREN, )>
<ADDOP, +>
<ID, b>
<MULOP, *>
<LPAREN, (>
<ID, P>
<ID, y>
<RPAREN, )>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ID, line>
<LPAREN, (>
<DOUBLE, double>
<ID, x1>
<COMMA, ,>
<DOUBLE, double>
<ID, y1>
<COMMA, ,>
<DOUBLE, double>
<ID, r1>
<COMMA, ,>
<DOUBLE, double>
<ID, x2>
<COMMA, ,>
<DOUBLE, double>
<ID, y2>
<COMMA, ,>
<DOUBLE, double>
<ID, r2>
<RPAREN, )>
<LCURL, {>
<ID, a>
<ASSIGNOP, =>
<CONST_INT, 2>
<MULOP, *>
<ID, x1>
<CONST_INT, -2>
<MULOP, *>
<ID, x2>
<SEMICOLON, ;>
<ID, b>
<ASSIGNOP, =>
<CONST_INT, 2>
<MULOP, *>
<ID, y1>
<CONST_INT, -2>
<MULOP, *>
<ID, y2>
<SEMICOLON, ;>
<ID, c>
<ASSIGNOP, =>
<ID, x2>
<MULOP, *>
<ID, x2>
<ADDOP, ->
<ID, x1>
<MULOP, *>
<ID, x1>
<ADDOP, +>
<ID, y2>
<MULOP, *>
<ID, y2>
<ADDOP, ->
<ID, y1>
<MULOP, *>
<ID, y1>
<ADDOP, +>
<ID, r1>
<MULOP, *>
<ID, r1>
<ADDOP, ->
<ID, r2>
<MULOP, *>
<ID, r2>
<SEMICOLON, ;>
<RCURL, }>
<DOUBLE, double>
<ID, side>
<LPAREN, (>
<ID, point>
<ID, g>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<LPAREN, (>
<ID, g>
<ID, x>
<MULOP, *>
<ID, a>
<ADDOP, +>
<ID, g>
<ID, y>
<MULOP, *>
<ID, b>
<ADDOP, +>
<ID, c>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<DOUBLE, double>
<ID, dis>
<LPAREN, (>
<ID, point>
<ID, g>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ID, abs>
<LPAREN, (>
<LPAREN, (>
<ID, a>
<MULOP, *>
<ID, g>
<ID, x>
<ADDOP, +>
<ID, b>
<MULOP, *>
<ID, g>
<ID, y>
<ADDOP, +>
<ID, c>
<RPAREN, )>
<MULOP, />
<ID, sqrt>
<LPAREN, (>
<ID, a>
<MULOP, *>
<ID, a>
<ADDOP, +>
<ID, b>
<MULOP, *>
<ID, b>
<RPAREN, )>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ID, bool>
<ID, equal>
<LPAREN, (>
<ID, line>
<ID, L>
<RPAREN, )>
<LCURL, {>
<DOUBLE, double>
<ID, f>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, L>
<ID, a>
<RELOP, !=>
<CONST_INT, 0>
<RPAREN, )>
<ID, f>
<ASSIGNOP, =>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<MULOP, />
<ID, L>
<ID, a>
<SEMICOLON, ;>
<ELSE, else>
<IF, if>
<LPAREN, (>
<ID, L>
<ID, b>
<RELOP, !=>
<CONST_INT, 0>
<RPAREN, )>
<ID, f>
<ASSIGNOP, =>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<MULOP, />
<ID, L>
<ID, b>
<SEMICOLON, ;>
<ELSE, else>
<IF, if>
<LPAREN, (>
<ID, L>
<ID, c>
<RELOP, !=>
<CONST_INT, 0>
<RPAREN, )>
<ID, f>
<ASSIGNOP, =>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, c>
<MULOP, />
<ID, L>
<ID, c>
<SEMICOLON, ;>
<RETURN, return>
<LPAREN, (>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<MULOP, />
<ID, L>
<ID, a>
<RELOP, ==>
<ID, f>
<LOGICOP, ||>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<RELOP, ==>
<ID, L>
<ID, a>
<LOGICOP, &&>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<RPAREN, )>
<LOGICOP, &&>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<MULOP, />
<ID, L>
<ID, b>
<RELOP, ==>
<ID, f>
<LOGICOP, ||>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<RELOP, ==>
<ID, L>
<ID, b>
<LOGICOP, &&>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<RPAREN, )>
<LOGICOP, &&>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, c>
<MULOP, />
<ID, L>
<ID, c>
<RELOP, ==>
<ID, f>
<LOGICOP, ||>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, c>
<RELOP, ==>
<ID, L>
<ID, c>
<LOGICOP, &&>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, c>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<RPAREN, )>
<RPAREN, )>
<ID, true>
<ID, false>
<SEMICOLON, ;>
<RCURL, }>
<ID, bool>
<ID, parallel>
<LPAREN, (>
<ID, line>
<ID, L>
<RPAREN, )>
<LCURL, {>
<DOUBLE, double>
<ID, f>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, L>
<ID, a>
<RELOP, !=>
<CONST_INT, 0>
<RPAREN, )>
<ID, f>
<ASSIGNOP, =>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<MULOP, />
<ID, L>
<ID, a>
<SEMICOLON, ;>
<ELSE, else>
<IF, if>
<LPAREN, (>
<ID, L>
<ID, b>
<RELOP, !=>
<CONST_INT, 0>
<RPAREN, )>
<ID, f>
<ASSIGNOP, =>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<MULOP, />
<ID, L>
<ID, b>
<SEMICOLON, ;>
<RETURN, return>
<LPAREN, (>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<MULOP, />
<ID, L>
<ID, a>
<RELOP, ==>
<ID, f>
<LOGICOP, ||>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<RELOP, ==>
<ID, L>
<ID, a>
<LOGICOP, &&>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<RPAREN, )>
<LOGICOP, &&>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<MULOP, />
<ID, L>
<ID, b>
<RELOP, ==>
<ID, f>
<LOGICOP, ||>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<RELOP, ==>
<ID, L>
<ID, b>
<LOGICOP, &&>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<RPAREN, )>
<RPAREN, )>
<ID, true>
<ID, false>
<SEMICOLON, ;>
<RCURL, }>
<ID, point>
<ID, intersect>
<LPAREN, (>
<ID, line>
<ID, L>
<RPAREN, )>
<LCURL, {>
<DOUBLE, double>
<ID, a1>
<ASSIGNOP, =>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, b1>
<ASSIGNOP, =>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, c1>
<ASSIGNOP, =>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, c>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, a2>
<ASSIGNOP, =>
<ID, L>
<ID, a>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, b2>
<ASSIGNOP, =>
<ID, L>
<ID, b>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, c2>
<ASSIGNOP, =>
<ID, L>
<ID, c>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, det>
<ASSIGNOP, =>
<ADDOP, ->
<ID, a1>
<MULOP, *>
<ID, b2>
<ADDOP, +>
<ID, a2>
<MULOP, *>
<ID, b1>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, det>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ID, point>
<LPAREN, (>
<ID, double_MAX>
<COMMA, ,>
<ID, double_MAX>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<DOUBLE, double>
<ID, x>
<ASSIGNOP, =>
<LPAREN, (>
<ID, b2>
<MULOP, *>
<ID, c1>
<ADDOP, ->
<ID, b1>
<MULOP, *>
<ID, c2>
<RPAREN, )>
<MULOP, />
<ID, det>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, y>
<ASSIGNOP, =>
<LPAREN, (>
<ID, a1>
<MULOP, *>
<ID, c2>
<ADDOP, ->
<ID, a2>
<MULOP, *>
<ID, c1>
<RPAREN, )>
<MULOP, />
<ID, det>
<SEMICOLON, ;>
<RETURN, return>
<ID, point>
<LPAREN, (>
<ID, x>
<COMMA, ,>
<ID, y>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
<DOUBLE, double>
<ID, getx>
<LPAREN, (>
<DOUBLE, double>
<ID, Y>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ADDOP, ->
<LPAREN, (>
<ID, b>
<MULOP, *>
<ID, Y>
<ADDOP, +>
<ID, c>
<RPAREN, )>
<MULOP, />
<ID, a>
<SEMICOLON, ;>
<RCURL, }>
<DOUBLE, double>
<ID, gety>
<LPAREN, (>
<DOUBLE, double>
<ID, X>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ADDOP, ->
<LPAREN, (>
<ID, a>
<MULOP, *>
<ID, X>
<ADDOP, +>
<ID, c>
<RPAREN, )>
<MULOP, />
<ID, b>
<SEMICOLON, ;>
<RCURL, }>
<ID, friend>
<ID, ostream>
<BITOP, &>
<ID, operator>
<BITOP, <<>
<LPAREN, (>
<ID, ostream>
<BITOP, &>
<ID, os>
<COMMA, ,>
<ID, const>
<ID, line>
<BITOP, &>
<ID, dt>
<RPAREN, )>
<SEMICOLON, ;>
<ID, bool>
<ID, operator>
<RELOP, ==>
<LPAREN, (>
<ID, const>
<ID, line>
<BITOP, &>
<ID, dt>
<RPAREN, )>
<LCURL, {>
<ID, point>
<ID, o>
<LPAREN, (>
<CONST_INT, 0>
<COMMA, ,>
<CONST_INT, 0>
<RPAREN, )>
<SEMICOLON, ;>
<ID, line>
<ID, L1>
<LPAREN, (>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, a>
<COMMA, ,>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, b>
<COMMA, ,>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, c>
<RPAREN, )>
<SEMICOLON, ;>
<ID, line>
<ID, L2>
<LPAREN, (>
<ID, dt>
<ID, a>
<COMMA, ,>
<ID, dt>
<ID, b>
<COMMA, ,>
<ID, dt>
<ID, c>
<RPAREN, )>
<SEMICOLON, ;>
<RETURN, return>
<LPAREN, (>
<ID, L1>
<ID, a>
<MULOP, *>
<ID, L2>
<ID, b>
<RELOP, ==>
<ID, L1>
<ID, b>
<MULOP, *>
<ID, L2>
<ID, a>
<LOGICOP, &&>
<ID, L1>
<ID, dis>
<LPAREN, (>
<ID, o>
<RPAREN, )>
<RELOP, ==>
<ID, L2>
<ID, dis>
<LPAREN, (>
<ID, o>
<RPAREN, )>
<RPAREN, )>
<ID, true>
<ID, false>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
<SEMICOLON, ;>
<ID, bool>
<ID, between>
<LPAREN, (>
<DOUBLE, double>
<ID, a>
<COMMA, ,>
<DOUBLE, double>
<ID, b>
<COMMA, ,>
<DOUBLE, double>
<ID, c>
<RPAREN, )>
<LCURL, {>
<DOUBLE, double>
<ID, d>
<ASSIGNOP, =>
<LPAREN, (>
<ID, a>
<ADDOP, ->
<ID, b>
<RPAREN, )>
<MULOP, *>
<LPAREN, (>
<ID, b>
<ADDOP, ->
<ID, c>
<RPAREN, )>
<SEMICOLON, ;>
<RETURN, return>
<LPAREN, (>
<ID, d>
<RELOP, <>
<CONST_INT, 0>
<RPAREN, )>
<ID, false>
<ID, true>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, main>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, n>
<COMMA, ,>
<ID, m>
<SEMICOLON, ;>
<ID, cin>
<BITOP, >>>
<ID, n>
<BITOP, >>>
<ID, m>
<SEMICOLON, ;>
<ID, point>
<ID, a>
<LSQUARE, [>
<ID, n>
<RSQUARE, ]>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<INT, int>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<ID, n>
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<RPAREN, )>
<LCURL, {>
<ID, cin>
<BITOP, >>>
<ID, a>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<ID, x>
<BITOP, >>>
<ID, a>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<ID, y>
<SEMICOLON, ;>
<RCURL, }>
<ID, point>
<ID, f>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<INT, int>
<ID, j>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, j>
<RELOP, <>
<ID, m>
<SEMICOLON, ;>
<ID, j>
<INCOP, ++>
<RPAREN, )>
<LCURL, {>
<ID, cin>
<BITOP, >>>
<ID, f>
<ID, x>
<BITOP, >>>
<ID, f>
<ID, y>
<SEMICOLON, ;>
<INT, int>
<ID, b>
<ASSIGNOP, =>
<CONST_INT, 0>
<COMMA, ,>
<ID, cnt>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<INT, int>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<ID, n>
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, g>
<ASSIGNOP, =>
<ID, i>
<COMMA, ,>
<ID, h>
<ASSIGNOP, =>
<LPAREN, (>
<ID, i>
<CONST_INT, +1>
<RPAREN, )>
<MULOP, %>
<ID, n>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, a>
<LSQUARE, [>
<ID, g>
<RSQUARE, ]>
<ID, x>
<RELOP, >>
<ID, a>
<LSQUARE, [>
<ID, h>
<RSQUARE, ]>
<ID, x>
<RPAREN, )>
<LCURL, {>
<ID, swap>
<LPAREN, (>
<ID, g>
<COMMA, ,>
<ID, h>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ID, line>
<ID, L1>
<LPAREN, (>
<ID, a>
<LSQUARE, [>
<ID, g>
<RSQUARE, ]>
<COMMA, ,>
<ID, a>
<LSQUARE, [>
<ID, h>
<RSQUARE, ]>
<RPAREN, )>
<COMMA, ,>
<ID, L2>
<LPAREN, (>
<ID, a>
<LSQUARE, [>
<ID, g>
<RSQUARE, ]>
<COMMA, ,>
<ID, f>
<RPAREN, )>
<COMMA, ,>
<ID, L3>
<LPAREN, (>
<ID, a>
<LSQUARE, [>
<ID, h>
<RSQUARE, ]>
<COMMA, ,>
<ID, f>
<RPAREN, )>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<LPAREN, (>
<ID, L1>
<ID, equal>
<LPAREN, (>
<ID, L2>
<RPAREN, )>
<LOGICOP, ||>
<ID, L1>
<ID, equal>
<LPAREN, (>
<ID, L3>
<RPAREN, )>
<RPAREN, )>
<LOGICOP, &&>
<ID, between>
<LPAREN, (>
<ID, a>
<LSQUARE, [>
<ID, g>
<RSQUARE, ]>
<ID, x>
<COMMA, ,>
<ID, f>
<ID, x>
<COMMA, ,>
<ID, a>
<LSQUARE, [>
<ID, h>
<RSQUARE, ]>
<ID, x>
<RPAREN, )>
<LOGICOP, &&>
<ID, between>
<LPAREN, (>
<ID, a>
<LSQUARE, [>
<ID, g>
<RSQUARE, ]>
<ID, y>
<COMMA, ,>
<ID, f>
<ID, y>
<COMMA, ,>
<ID, a>
<LSQUARE, [>
<ID, h>
<RSQUARE, ]>
<ID, y>
<RPAREN, )>
<RPAREN, )>
<ID, b>
<INCOP, ++>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, between>
<LPAREN, (>
<ID, a>
<LSQUARE, [>
<ID, g>
<RSQUARE, ]>
<ID, x>
<COMMA, ,>
<ID, f>
<ID, x>
<COMMA, ,>
<ID, a>
<LSQUARE, [>
<ID, h>
<RSQUARE, ]>
<ID, x>
<RPAREN, )>
<LOGICOP, &&>
<ID, L1>
<ID, side>
<LPAREN, (>
<ID, f>
<RPAREN, )>
<RELOP, >>
<CONST_INT, 0>
<LOGICOP, &&>
<ID, a>
<LSQUARE, [>
<ID, h>
<RSQUARE, ]>
<ID, x>
<RELOP, !=>
<ID, f>
<ID, x>
<RPAREN, )>
<ID, cnt>
<INCOP, ++>
<SEMICOLON, ;>
<RCURL, }>
<IF, if>
<LPAREN, (>
<ID, b>
<RELOP, !=>
<CONST_INT, 0>
<RPAREN, )>
<ID, cout>
<BITOP, <<>
<SINGLE LINE STRING, BOUNDARY
>
<SEMICOLON, ;>
<ELSE, else>
<IF, if>
<LPAREN, (>
<ID, cnt>
<MULOP, %>
<CONST_INT, 2>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<ID, cout>
<BITOP, <<>
<SINGLE LINE STRING, OUTSIDE
>
<SEMICOLON, ;>
<ELSE, else>
<ID, cout>
<BITOP, <<>
<SINGLE LINE STRING, INSIDE
>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
